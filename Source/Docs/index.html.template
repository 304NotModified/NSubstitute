<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8" />
  <title>NSubstitute - a friendly substitute for .NET mocking libraries</title>
  <link rel="stylesheet" href="style.css" type="text/css" />
  <link rel="stylesheet" href="http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.2/themes/base/jquery-ui.css" tpe="test/css" />
</head>
<body>
<a href="http://github.com/nsubstitute/NSubstitute"><img style="position: absolute; top: 0; right: 0; border: 0;" src="http://s3.amazonaws.com/github/ribbons/forkme_right_gray_6d6d6d.png" alt="Fork me on GitHub" /></a>
  </div>

  <div id="Header">
      <img src="NSubstitute.png" style="float: left; margin-right: 15px; width: 100px; height: 100px;" />
      <h1 style="display: inline"> NSubstitute </h1> <br />
      <span><i>A friendly substitute for .NET mocking frameworks</i></span>
  </div>

  <p>&nbsp;</p>

  <div id="tabs">
    <ul>
      <li><a href="#what-is-it">What is it?</a></li>
      <li><a href="#how-do-i-use-it">How do I use it?</a></li>
      <li><a href="#why-use-it">Why use it?</a></li>
      <li><a href="#where-do-i-find-out-more">Where do I find out more?</a></li>
    </ul>

    <div id="what-is-it">
      <p>NSubstitute is a friendly substitute for .NET mocking frameworks.</p>

      <p>It's like a stub with property behaviour.<br/>
      With nice semantics for setting return values.<br/>
      It only has one mode - loose semantics, which you can query afterwards.<br/>
      It's meant to be simple, succinct and pleasant to use.  </p>

      <div class="download">
      <a href="http://github.com/downloads/nsubstitute/NSubstitute/NSubstitute-0.1.1.zip">Download NSubstitute 0.1 alpha 2</a>
      <a href="http://github.com/nsubstitute/NSubstitute/downloads" style="font-size: x-small;">Grab the source from GitHub</a>
      </div>

    </div>

    <div id="how-do-i-use-it">
<p> Let's say we have a basic calculator interface: </p>

{CODE:basic_calculator_interface}

<p> We can ask NSubstitute to create a substitute instance for this type. We could ask for a stub, mock, fake, spy, test double etc., but why bother when we just want to substitute an instance we have some control over?
</p>

{CODE:substitute_for_calculator}

<p> Now we can tell our substitute to return a value for a call: </p>

{CODE:return_a_value_for_a_call}

<p> We can check that our substitute received a call, and did not receive others: </p>

{CODE:check_substitute_received_some_calls_but_not_others}

<p> If our Received() assertion fails, NSubstitute tries to give us some help as to what the problem might be: </p>

<pre>
NSubstitute.Exceptions.CallNotReceivedException : Expected to receive call:
	Add(1, 2)
Actually received:
	Add(4, 5)
	Add(3, 4)
</pre>

<p> We can also work with properties using the Returns syntax we use for methods, or just stick with plain old property setters (for read/write properties): </p>

{CODE:set_properties_with_returns_or_setters}

<p> NSubstitute supports argument matching for setting return values and asserting a call was received: </p>

{CODE:arg_matching}

<p> We can use argument matching as well as passing a function to Returns() to get some more behaviour out of our substitute (possibly too much, but that's your call): </p>

{CODE:arg_matching_and_behaviour}

<p> Returns() can also be called with multiple arguments to set up a sequence of return values.  </p>

{CODE:return_multiple_arguments}

<p> Finally, we can raise events on our substitutes (unfortunately C# dramatically restricts the extent to which this syntax can be cleaned up): </p>

{CODE:raise_events}
 
    </div>

    <div id="why-use-it">
      <p>There are already some great mocking frameworks around for .NET, so why create another? We found that for all their great features, none of the existing frameworks had the succinct syntax we were craving &mdash; the code required to configure test doubles quickly obscured the intention behind our tests.</p>

	  <p>We've attempted to make the most frequently required operations obvious and easy to use, keeping less usual scenarios discoverable and accessible, and all the while maintaining as much natural language as possible.</p>

	  <p>Perfect for those new to testing, and for others who would just like to to get their tests written with less noise and less lambdas.</p>

    </div>
	
	
    <div id="where-do-i-find-out-more">
      <p>To ask a question about or provide some feedback on NSubstitute, head on over to the <a href="http://groups.google.com/group/nsubstitute">NSubstitute discussion group</a>.</p>
      <p>You can also check out the <a href="http://github.com/nsubstitute/NSubstitute">NSubstitute project site on GitHub</a>, where you can grab the source, raise an issue, or browse through the acceptance tests for some examples of how NSubstitute works.</p>
    </div>

  </div>

  <div id="footer">
  NSubstitute is open source software, licensed under the <a href="http://www.opensource.org/licenses/bsd-license.php">BSD License</a>.<br />
  NSubstitute logo donated by <a href="http://troyhunt.com">Troy Hunt</a>.
  </div>

  <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
  <script src="http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.2/jquery-ui.min.js"></script>

 <script type="text/javascript">
    $(document).ready(function() {
      $("#tabs").tabs({ fx: { opacity: 'toggle', duration: 'fast'}});
    });
  </script>

<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-17200262-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>

</body>
</html>
